package main

import (
	"bufio"
	"fmt"
	"math/rand"
	"os"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/fatih/color"
)

type card struct {
	number int
	suit   int
}
type numType map[int]int
type suitType map[int]int

var aCard card

//var numMap numType

func main() {
	fmt.Println("Hello WinStar!!!\u2660\u2666\u2665\u2663 ")
	fmt.Println("Welcome, get your chips ready and...")
	fmt.Println("PLAY")
	fmt.Println("you have 200 chips, if you lose them all your done.")
	chips := 200
	for i := 0; i < 6; i++ {
	start:
		fmt.Println("your game choices are...")
		fmt.Println("for Roulette enter r")
		fmt.Println("for Poker enter p")
		reader := bufio.NewReader(os.Stdin)
		text, _ := reader.ReadString('\n')
		text = strings.Replace(text, "\n", "", -1)
		if strings.Compare("r", text) == 0 {
			fmt.Println("This is Roulette!")
			fmt.Println("you have ", chips)
			fmt.Println("to $40 bet on black press b")
			fmt.Println("to $40 bet on red press r")
			chips = chips - 40
			//use of bufio & os
			reader := bufio.NewReader(os.Stdin)
			text, _ := reader.ReadString('\n')
			text = strings.Replace(text, "\n", "", -1)
			if strings.Compare("r", text) == 0 {
				fmt.Println("It's going!")
				fmt.Println("spinning and spinning and spinning")
				fmt.Println("and it's...")
				//use of rand/math & time
				rand.Seed(time.Now().UnixNano())
				var randNum int = rand.Intn(2)
				fmt.Println(randNum)
				if randNum == 1 {
					fmt.Println("congratulations, you win $60")
					chips = chips + 60
					fmt.Println("you have $", chips)
				} else {
					fmt.Println("sorry you lost :( ")
				}
			} else {
				fmt.Println("It's going!")
				fmt.Println("spinning and spinning and spinning")
				fmt.Println("and it's...")
				rand.Seed(time.Now().UnixNano())
				var randNum int = rand.Intn(2)
				fmt.Println(randNum)
				if randNum == 0 {
					fmt.Println("congratulations, you win $60")
					chips = chips + 60
					fmt.Println("you have $", chips)
				} else {
					fmt.Println("sorry you lost :( ")
				}
			}
		}
		if strings.Compare("p", text) == 0 {
			//play poker
			//var numMap = map[int]int{}
			//var suitMap = map[int]int{}
			//var slice = []{numMap, suitMap}

			//var numSlice = []numType{}
			//var suitSlice = []suitType{}
			var deck = map[card]int{}
			for v := 0; v < 14; v++ {
				for z := 0; z < 4; z++ {
					aCard.number = v
					aCard.suit = z
					deck[aCard]++
				}
			}
			fmt.Println("hi welcome to the table, you have ", chips)
			reader := bufio.NewReader(os.Stdin)
			text, _ := reader.ReadString('\n')
			text = strings.Replace(text, "\n", "", -1)

			numMap, suitMap := deal(deck)
			//deal(deck, numSlice, suitSlice)
			//deal(3, deck, numSlice, suitSlice)
			pair := 0
			//three := false
			//full := false
			//four := false
			straight := false
			//flush := false
			strflush := false
			royal := false
			//check the hand
			fullCheck := 0
			flushCheck := 0
			straightCheck := []int{}
			for key, val := range numMap {
				fullCheck++
				if val == 2 {
					fmt.Println("you have a PAIR")
					pair++
				} else if val == 3 {
					fmt.Println("you have a THREE OF A KIND")
					//	three = true
				} else if val == 4 {
					fmt.Println("you have a FOUR OF A KIND")
					//	four = true
					fullCheck++
				} else {
					print()
				}
				straightCheck = append(straightCheck, key)
			}
			//sort numbers for a straight
			sort.Ints(straightCheck)
			fmt.Printf("%+v\n", straight)
			ln := straightCheck[len(straightCheck)-1]
			fn := straightCheck[0]
			ss := ln - fn
			if ss == 4 {
				fmt.Println("you have a STRAIGHT")
				//straight = true
				if flushCheck == 1 {
					fmt.Println("you have a STRAIGHT FLUSH")
					strflush = true
					//if myCard.number == 14 {
					//	fmt.Println("YOU HAVE A ROYAL FLUSH")
					//	chips = chips + 10
					//	fmt.Println("you get a free 10 chips")
					//	royal = true
					//}
				}
			}
			for range suitMap {
				flushCheck++
			}
			if fullCheck == 2 {
				fmt.Println("you have a FULL HOUSE")
				//full = true
			}
			if flushCheck == 1 {
				fmt.Println("you have a FLUSH")
				//flush = true
			}
			//poker betting
			pot := 0
			call := 0
			fold2 := false
			fold3 := false
			fmt.Println("do you want to bet or do you want to fold")
			for f := 0; f < 2; f++ {
				reader := bufio.NewReader(os.Stdin)
				text, _ := reader.ReadString('\n')
				text = strings.Replace(text, "\n", "", -1)
				if strings.Compare("fold", text) == 0 {
					fmt.Println("Alright thanks for playing")
					goto start
				} else {
					reader := bufio.NewReader(os.Stdin)
					text, _ := reader.ReadString('\n')
					text = strings.Replace(text, "\n", "", -1)
					potInput, _ := strconv.Atoi(text)
					pot = pot + potInput
					var player2Bet int = rand.Intn(4)
					if player2Bet == 0 || player2Bet == 1 {
						fmt.Println("player 2 calls your bet")
						pot = pot + potInput
						call++
					} else if player2Bet == 2 {
						var raise2 int = rand.Intn(3)
						if raise2 == 0 {
							fmt.Println("he raises 10 chips")
							pot = pot + 10 + potInput
						} else if raise2 == 1 {
							fmt.Println("he raises 20 chips")
							pot = pot + 20 + potInput
						} else {
							fmt.Println("he raises 30 chips")
							pot = pot + 30 + potInput
						}
					} else {
						println("player 2 has folded")
					}
					var player3Bet int = rand.Intn(4)
					if player3Bet == 0 {
						fmt.Println("player 2 calls your bet")
						pot = pot + potInput
						call++
					} else if player3Bet == 2 {
						var raise3 int = rand.Intn(3)
						if raise3 == 0 {
							fmt.Println("he raises 10 chips")
							pot = pot + 10 + potInput
						} else if raise3 == 1 {
							fmt.Println("he raises 20 chips")
							pot = pot + 20 + potInput
						} else {
							fmt.Println("he raises 30 chips")
							pot = pot + 30 + potInput
						}
					} else {
						println("player 3 has folded")
						fold3 = true
					}
					if fold2 == true && fold3 == true {
						println("congrats you win ", pot, "chips")
						chips = chips + pot
					}
				}
			}
			//who wins
			if royal == true {
				println("congrats you WIN")
				chips = chips + pot
			} else if strflush == true {

			}
		}
	}
	fmt.Println("Well, thanks for coming down to WinStar Casino")
	fmt.Println("have a safe drive home :)")
}
func deal(deck map[card]int) (numMap numType, suitMap suitType) {
	fmt.Println("here are your cards")
	numMap = make(map[int]int)
	suitMap = make(map[int]int)
	for j := 0; j < 5; j++ {
		rand.Seed(time.Now().UnixNano())
		var randNum int = rand.Intn(13) + 2
		var suitRand int = rand.Intn(4)
		aCard.number = randNum
		aCard.suit = suitRand
		if deck[aCard] == 1 {
			deck[aCard] = 0
		} else {
			j--
			continue
		}
		displayNum := strconv.Itoa(randNum)
		if displayNum == "11" {
			displayNum = " J"
		} else if displayNum == "12" {
			displayNum = " Q"
		} else if displayNum == "13" {
			displayNum = " K"
		} else if displayNum == "14" {
			displayNum = " A"
		} else if randNum < 10 {
			displayNum = " " + displayNum
		}
		if suitRand == 2 {
			color.Red(displayNum + "\u2665") //heart
		} else if suitRand == 1 {
			color.Red(displayNum + "\u2666") //diamond
		} else if suitRand == 0 {
			println(displayNum + "\u2663") // clubs
		} else if suitRand == 3 {
			println(displayNum + "\u2660") // spades
		}
		numMap[randNum]++
		suitMap[suitRand]++
	}
	return
}
