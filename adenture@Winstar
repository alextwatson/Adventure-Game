package main

import (
	"bufio"
	"fmt"
	"math/rand"
	"os"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/fatih/color"
)

type card struct {
	number int
	suit   int
}
type numType map[int]int
type suitType map[int]int

var aCard card

//var numMap numType

func main() {
	fmt.Println("Hello WinStar!!!\u2660\u2666\u2665\u2663 ")
	fmt.Println("Welcome, get your chips ready and...")
	fmt.Println("PLAY")
	fmt.Println("you have 200 chips, if you lose them all your done.")
	chips := 200
	for i := 0; i < 5; i++ {
	start:
		fmt.Println("your game choices are...")
		fmt.Println("for Roulette enter r")
		fmt.Println("for Poker enter p")
		reader := bufio.NewReader(os.Stdin)
		text, _ := reader.ReadString('\n')
		text = strings.Replace(text, "\n", "", -1)

		////////////////ROULETTE///////////////////////////////////////////////////////////////////
		//////////////////////////////////////////ROULETTE/////////////////////////////////////////
		/////////////////////////////////////////////////////////////////ROULETTE//////////////////
		if strings.Compare("r", text) == 0 {
			fmt.Println("This is Roulette!")
			fmt.Println("you have ", chips)
			fmt.Println("to $40 bet on black press b")
			fmt.Println("to $40 bet on red press r")
			chips = chips - 40
			//use of bufio & os
			reader := bufio.NewReader(os.Stdin)
			text, _ := reader.ReadString('\n')
			text = strings.Replace(text, "\n", "", -1)
			if strings.Compare("r", text) == 0 {
				fmt.Println("It's going!")
				println("spinning and spinning and spinning")
				//color.Attribute("
				fmt.Println("and it's...")
				//use of rand/math & time
				time.Sleep(3000 * time.Millisecond)
				rand.Seed(time.Now().UnixNano())
				var randNum int = rand.Intn(2)
				if randNum == 1 {
					color.Red("RED\n")
					fmt.Println("congratulations, you win $80")
					chips = chips + 80
					fmt.Println("you have $", chips)
				} else {
					println("black")
					fmt.Println("sorry you lost :( ")
				}
			} else {
				fmt.Println("It's going!")
				println("spinning and spinning and spinning")
				fmt.Println("and it's...")
				time.Sleep(3000 * time.Millisecond)
				rand.Seed(time.Now().UnixNano())
				var randNum int = rand.Intn(2)
				fmt.Println(randNum)
				if randNum == 0 {
					println("BLACK")
					fmt.Println("congratulations, you win $80")
					chips = chips + 80
					fmt.Println("you have $", chips)
				} else {

					color.Red("red\n")
					fmt.Println("sorry you lost :( ")
				}
			}
		}
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////POKER//////////////////////////////////////POKER/////////////////////////POKER/////////////////////////////
		/////////////////////POKER////////////////////////////////////////POKER///////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if strings.Compare("p", text) == 0 {
			//play poker
			//var numMap = map[int]int{}
			//var suitMap = map[int]int{}
			//var slice = []{numMap, suitMap}
			var numSlice = []numType{}
			var suitSlice = []suitType{}
			var deck = map[card]int{}
			for v := 2; v <= 14; v++ {
				for z := 0; z < 4; z++ {
					aCard.number = v
					aCard.suit = z
					deck[aCard]++
				}
			}
			fmt.Println("hi welcome to the table, you have ", chips)
			reader := bufio.NewReader(os.Stdin)
			text, _ := reader.ReadString('\n')
			text = strings.Replace(text, "\n", "", -1)

			//dealing for player 1

			numMap, suitMap := deal(deck)
			numSlice = append(numSlice, numMap)
			suitSlice = append(suitSlice, suitMap)
			var scoreArr = [3]float64{}
			scoreArr[0] = check(numSlice[0], suitSlice[0])
			///////////////////////////////////////////////////////////////////
			/////////////////////////POKER BETTING/////////////////////////////
			///////////////////////////////////////////////////////////////////
			pot := 0
			potInput := 0
			need := 10
			call2 := false
			call3 := false
			allIn := false
			fold2 := false
			fold3 := false
			for f := 0; f < 2; f++ {
				fmt.Println("do you want to bet ", need, "or do you want to fold (press f to fold or enter to bet)")
				reader := bufio.NewReader(os.Stdin)
				text, _ := reader.ReadString('\n')
				text = strings.Replace(text, "\n", "", -1)
				if strings.Compare("f", text) == 0 {
					fmt.Println("Alright thanks for playing")
					goto start
				} else {
					println("how much do you want to bet, it must be at least", need)
					reader := bufio.NewReader(os.Stdin)
					text, _ := reader.ReadString('\n')
					text = strings.Replace(text, "\n", "", -1)
					if strings.Compare("all in", text) == 0 {
						potInput = chips
						f = 3
						allIn = true
					} else {
						potInput, _ = strconv.Atoi(text)
						need = potInput
					}
					if potInput < need {
						println("if you don't want to follow the rules we'll bet", need, "for you")
					}
					chips = chips - potInput
					pot = pot + potInput
					if allIn == false {
						var player2Bet int = rand.Intn(3)
						if player2Bet == 0 || player2Bet == 1 {
							fmt.Println("player 2 calls the bet")
							pot = pot + potInput
							call2 = true
						} else if player2Bet == 2 {
							var raise2 int = rand.Intn(3)
							if raise2 == 0 {
								fmt.Println("he raises 10 chips")
								need = need + 10
								pot = pot + 10 + potInput
							} else if raise2 == 1 {
								fmt.Println("he raises 20 chips")
								need = need + 20
								pot = pot + 20 + potInput
							} else {
								fmt.Println("he raises 30 chips")
								need = need + 30
								pot = pot + 30 + potInput
							}
						}
						var player3Bet int = rand.Intn(3)
						if player3Bet == 0 || player3Bet == 1 {
							fmt.Println("player 3 calls the bet")
							pot = pot + potInput
							call3 = true
						} else if player3Bet == 2 {
							var raise3 int = rand.Intn(3)
							if raise3 == 0 {
								fmt.Println("he raises 10 chips")
								need = need + 10
								pot = pot + 10 + potInput
							} else if raise3 == 1 {
								fmt.Println("he raises 20 chips")
								need = need + 20
								pot = pot + 20 + potInput
							} else {
								fmt.Println("he raises 30 chips")
								need = need + 30
								pot = pot + 30 + potInput
							}
						}

					} else {
						var player2Bet int = rand.Intn(3)
						if player2Bet == 0 || player2Bet == 1 {
							fmt.Println("player 2 calls the bet")
							pot = pot + potInput
							call2 = true
						} else {
							var bluffc2 int = rand.Intn(3)
							if bluffc2 == 2 {
								println("player 2: dang,:( I fold")
								fold2 = true
							}
						}
						var player3Bet int = rand.Intn(3)
						if player3Bet == 0 || player3Bet == 1 {
							fmt.Println("player 3 calls the bet")
							pot = pot + potInput
							call2 = true
						} else {
							var bluffc3 int = rand.Intn(3)
							if bluffc3 == 2 {
								println("player 3: dang,:( I fold")
								fold3 = true
							}
						}
					}
					if call2 == true && call3 == true {
						f = 3
						continue
					}
				}
			}
			if fold2 == false {
				println("player 2's cards")
				numMap, suitMap = deal(deck)
				numSlice = append(numSlice, numMap)
				suitSlice = append(suitSlice, suitMap)
				scoreArr[1] = check(numSlice[1], suitSlice[1])
			} else {
				scoreArr[1] = 0
			}
			if fold3 == false {
				println("player 3's cards")
				numMap, suitMap = deal(deck)
				numSlice = append(numSlice, numMap)
				suitSlice = append(suitSlice, suitMap)
				scoreArr[2] = check(numSlice[2], suitSlice[2])
			} else {
				scoreArr[2] = 0
			}
			// if only player 2 folds
			if fold3 == false && fold2 == true {
				if scoreArr[0] > scoreArr[2] {
					println("congrats you win ", pot, "chips")
					chips = chips + pot
					println("you have", chips, "left")
				} else if scoreArr[2] > scoreArr[0] {
					println("sorry you lost")
					println("you have", chips, "left")
				}
				//if only player 3 folds
			} else if fold2 == false && fold3 == true {
				if scoreArr[0] > scoreArr[1] {
					println("congrats you win ", pot, "chips")
					chips = chips + pot
					println("you have", chips, "left")
				} else if scoreArr[1] > scoreArr[0] {
					println("sorry you lost")
					println("you have", chips, "left")
				}
				//if nobody folds
			} else if fold2 == false && fold3 == false {
				if scoreArr[0] > scoreArr[2] && scoreArr[0] > scoreArr[1] {
					println("congrats you win ", pot, "chips")
					chips = chips + pot
					println("you have", chips, "left")
				} else if scoreArr[1] > scoreArr[0] && scoreArr[1] > scoreArr[2] {
					println("sorry you lost")
					println("you have", chips, "left")
				} else if scoreArr[2] > scoreArr[0] && scoreArr[2] > scoreArr[1] {
					println("sorry you lost")
					println("you have", chips, "left")
				}
			} else {
				println("congrats you win ", pot, "chips")
			}
			if chips < 1 {
				println("sorry you lose you ran out of chips")
				i = 6
				continue
			}
		}
	}
	fmt.Println("Well, thanks for coming down to WinStar Casino")
	fmt.Println("have a safe drive home :)")
}
func deal(deck map[card]int) (numMap numType, suitMap suitType) {
	numMap = make(map[int]int)
	suitMap = make(map[int]int)
	for j := 0; j < 5; j++ {
		rand.Seed(time.Now().UnixNano())
		var randNum int = rand.Intn(13) + 2
		var suitRand int = rand.Intn(4)
		aCard.number = randNum
		aCard.suit = suitRand
		if deck[aCard] == 1 {
			deck[aCard] = 0
		} else {
			j--
			continue
		}
		displayNum := strconv.Itoa(randNum)
		if displayNum == "11" {
			displayNum = " J"
		} else if displayNum == "12" {
			displayNum = " Q"
		} else if displayNum == "13" {
			displayNum = " K"
		} else if displayNum == "14" {
			displayNum = " A"
		} else if randNum < 10 {
			displayNum = " " + displayNum
		}
		if suitRand == 2 {
			color.Red(displayNum + "\u2665") //heart
		} else if suitRand == 1 {
			color.Red(displayNum + "\u2666") //diamond
		} else if suitRand == 0 {
			println(displayNum + "\u2663") // clubs
		} else if suitRand == 3 {
			println(displayNum + "\u2660") // spades
		}
		numMap[randNum]++
		suitMap[suitRand]++
	}
	return
}
func check(numMap numType, suitMap suitType) (score float64) {
	hightpear := 0.0
	pair := 0
	three := 0.0
	full := 0.0
	four := 0.0
	straight := 0.0
	highSuit := 0.0
	flush := 0.0
	strflush := 0.0
	highCheck := 0.0
	royal := 0.0
	//check the hand
	fullCheck := 0
	flushCheck := 0
	straightCheck := []int{}
	for key, val := range numMap {
		fullCheck++
		if val == 2 {
			//PAIR
			hightpear = float64(key)
			pair++
		} else if val == 3 {
			//THREE OF A KIND
			three = float64(key)
		} else if val == 4 {
			//FOUR OF A KIND
			four = float64(key)
			fullCheck++
		}
		if float64(key) > highCheck {
			highCheck = float64(key)
		}
		straightCheck = append(straightCheck, key)
	}
	//sort numbers for a straight
	sort.Ints(straightCheck)
	ln := straightCheck[len(straightCheck)-1]
	fn := straightCheck[0]
	ss := ln - fn
	if ss == 4 && fullCheck == 5 {
		//STRAIGHT
		straight = highCheck
		if flushCheck == 1 {
			//STRAIGHT FLUSH
			strflush = highCheck
			if highCheck == 14 {
				fmt.Println("YOU HAVE A ROYAL FLUSH")
				royal = highSuit
			}
		}
	}
	for key, _ := range suitMap {
		flushCheck++
		if float64(key) > highSuit {
			highSuit = float64(key)
		}
	}
	if fullCheck == 2 {
		//FULL HOUSE
		full = highCheck
	}
	if flushCheck == 1 {
		//FLUSH
		flush = highCheck
	}
	if royal > 0 {
		color.Magenta("ROYAL FLUSH")
		return float64(9) + royal/100
	} else if strflush > 0 {
		println("STRAIGHT FLUSH")
		return float64(8) + strflush/100
	} else if four > 0 {
		println("FOUR OF A KIND")
		return float64(7) + four/100
	} else if full > 0 {
		println("FULL HOUSE")
		return float64(6) + full/100
	} else if flush > 0 {
		println("FLUSH")
		return float64(6) + flush/100
	} else if straight > 0 {
		println("STRAIGHT")
		return float64(5) + straight/100
	} else if three > 0 {
		println("THREE OF A KIND")
		return float64(3) + three/100
	} else if pair == 2 {
		println("2 PAIR")
		return float64(2) + hightpear/100
	} else if pair == 1 {
		println("PAIR")
		return float64(1) + hightpear/100
	} else {
		println("hope for the high card")
		return highCheck / 100
	}

}
